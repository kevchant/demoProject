# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  configuration: release
  sqlinstance: localhost
  database: SQL2008DB
  2019database: SQL2019DB
  azuredatabase: AzureDB
  artifactname: SQL2008
  2019artifactname: SQL2019
  azureartifactname: AzureSQLDB
  azuresyndatabase: kcsyndemodw
  azuresynartifactname: AzureSQLDB

trigger:
- main
- kcdemobranch

stages:

- stage: SQL2008Build
  displayName: 'Build SQL 2008 dacpac'
  jobs:
    - job: 'Build2008'
      displayName: 'Build SQL 2008 dacpac'  
      variables:
        variables:
        agentpool: 'kchant DevOps Duet'
      pool: $(agentpool)

      steps:
      - task: VSBuild@1
        displayName: 'Build kcdemoproject for SQL Server 2008'
        inputs:
          solution: kcdemodbproject.sqlproj
          configuration: $(configuration)

      - task: CopyFiles@2
        displayName: "Copy files to 2008 artifact subfolder"
        inputs:
          Contents: |
            **\bin\$(configuration)\*.*
          TargetFolder: '$(Build.ArtifactStagingDirectory)\$(artifactname)'
          FlattenFolders: true
          OverWrite: true

      - task: PublishBuildArtifacts@1
        displayName: 'Publish SQL2008 artifact'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)\$(artifactname)'
          ArtifactName: $(artifactname)
          publishLocation: 'Container'

- stage: SQL2008Deploy
  dependsOn: SQL2008Build
  displayName: 'Deploy SQL 2008 update'

  jobs:
    - job: 'Deploy2008'
      displayName: 'Deploy SQL Server 2008 update'
      variables:
        variables:
        agentpool: 'kchant DevOps Duet'
        dacpacpath: $(System.ArtifactsDirectory)/$(artifactname)
        datadacpacfile: kcdemodbproject.dacpac

      pool: $(agentpool)
        
      steps:
      - task: DownloadBuildArtifacts@0
        displayName: 'Dowload Artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'specific'
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: SqlDacpacDeploymentOnMachineGroup@0
        displayName: 'Install DACPAC'
        inputs:
          TaskType: 'dacpac'
          DacpacFile: '$(dacpacpath)/$(datadacpacfile)'
          TargetMethod: 'server'
          ServerName: '23.97.145.217,1433'
          DatabaseName: '$(database)'
          AuthScheme: 'sqlServerAuthentication'
          SqlUsername: 'sa'
          SqlPassword: $(sqlsapw)
          AdditionalArguments: '/p:IncludeCompositeObjects=true'

- stage: AzureBuild
  dependsOn: SQL2008Build
  displayName: 'Build Azure SQL DB dacpac'

  jobs:
    - job: 'BuildAzureSQLDB'
      displayName: 'Build Azure SQL DB dacpac'
      variables:
        sourcepath: $(database)-Data
        stagingarea: $(Build.ArtifactStagingDirectory)\staging
        destinationpath: $(azuredatabase)
        dacpacpath: $(System.ArtifactsDirectory)/$(artifactname)
        datadacpacfile: $(azuredatabase).dacpac
        datapublishfile: $(dacpacpath)/$(azuredatabase).publish.xml

      pool:
        vmImage: vs2017-win2016
        
      steps:

      - task: CopyFiles@2
        displayName: "Copy files to staging area for Azure-Data"
        inputs:
          Contents: |
            $(Build.SourcesDirectory)\**
            !azure-pipelines.yml
          TargetFolder: '$(stagingarea)'
          FlattenFolders: false
          OverWrite: true

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            # Write your PowerShell commands here.
            
            ls
            cd..
            cd a
            cd staging

            rename-item kcdemodbproject.sqlproj kcdemoazureproject.sqlproj

            $Old_DSP = 'Microsoft.Data.Tools.Schema.Sql.Sql100DatabaseSchemaProvider'
            $New_DSP = 'Microsoft.Data.Tools.Schema.Sql.SqlAzureV12DatabaseSchemaProvider'
            
            (Get-Content "kcdemoazureproject.sqlproj") -replace $Old_DSP, $New_DSP  | Set-Content "kcdemoazureproject.sqlproj"

      - task: VSBuild@1
        displayName: 'Build Azure-Data project'
        inputs:
          solution: $(stagingarea)/kcdemoazureproject.sqlproj
          configuration: $(configuration)

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Azure SQL database artifact'
        inputs:
          PathtoPublish: '$(stagingarea)\bin\$(configuration)'
          ArtifactName: $(azureartifactname)
          publishLocation: 'Container'

- stage: DeployAzureDB
  dependsOn: AzureBuild
  displayName: 'Deploy to Azure SQL DB'

  jobs:
    - job: 'Deploy2008'
      displayName: 'Deploy Azure SQL DB'
      variables:
        variables:
        agentpool: 'kchant DevOps Duet'
        dacpacpath: $(System.ArtifactsDirectory)/$(azureartifactname)
        datadacpacfile: kcdemoazureproject.dacpac

      pool:
        vmImage: vs2017-win2016
        
      steps:
      - task: DownloadBuildArtifacts@0
        displayName: 'Dowload Artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'specific'
          artifactName:  '$(azureartifactname)'
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: SqlAzureDacpacDeployment@1
        displayName: 'Install DACPAC on Azure SQL DB'
        inputs:
          azureSubscription: 'Visual Studio Enterprise Subscription(170486b8-8385-407d-86a6-cff8864ec100)'
          AuthenticationType: 'server'
          ServerName: 'kcdemosrv.database.windows.net'
          DatabaseName: '$(azuredatabase)'
          SqlUsername: '$(azureuser)'
          SqlPassword: '$(azuresqlpw)'
          deployType: 'DacpacTask'
          DeploymentAction: 'Publish'
          DacpacFile: '$(dacpacpath)/$(datadacpacfile)'
          AdditionalArguments: '/p:IncludeCompositeObjects=true'
          IpDetectionMethod: 'AutoDetect'

- stage: SQL2019Build
  dependsOn: SQL2008Deploy
  displayName: 'Build SQL 2019 dacpac'
  jobs:
    - job: 'Build2019'
      displayName: 'Build SQL 2019 dacpac'  
      variables:
        variables:
        sourcepath: $(2019database)-Data
        stagingarea: $(Build.ArtifactStagingDirectory)\2019staging
        destinationpath: $(2019database)
        dacpacpath: $(System.ArtifactsDirectory)/$(2019artifactname)
        datadacpacfile: $(2019database).dacpac
        datapublishfile: $(dacpacpath)/$(2019database).publish.xml
        agentpool: 'kchant DevOps Duet'
      pool: $(agentpool)
        
      steps:

      - task: CopyFiles@2
        displayName: "Copy files to staging area for SQL2019"
        inputs:
          Contents: |
            $(Build.SourcesDirectory)\**
            !azure-pipelines.yml
          TargetFolder: '$(stagingarea)'
          FlattenFolders: false
          OverWrite: true

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            # Write your PowerShell commands here.
            
            ls
            cd..
            cd a
            cd 2019staging

            rename-item kcdemodbproject.sqlproj kcdemo2019project.sqlproj            

            $Old_DSP = 'Microsoft.Data.Tools.Schema.Sql.Sql100DatabaseSchemaProvider'
            $New_DSP = 'Microsoft.Data.Tools.Schema.Sql.Sql150DatabaseSchemaProvider'
                       
            (Get-Content "kcdemo2019project.sqlproj") -replace $Old_DSP, $New_DSP  | Set-Content "kcdemo2019project.sqlproj"

      - task: VSBuild@1
        displayName: 'Build SQL2019 project'
        inputs:
          solution: $(stagingarea)/kcdemo2019project.sqlproj
          configuration: $(configuration)

      - task: PublishBuildArtifacts@1
        displayName: 'Publish SQL 2019 database artifact'
        inputs:
          PathtoPublish: '$(stagingarea)\bin\$(configuration)'
          ArtifactName: $(2019artifactname)
          publishLocation: 'Container'

- stage: SQL2019
  dependsOn: SQL2019Build
  displayName: 'Deploy SQL 2019 update'

  jobs:
    - job: 'Deploy2019'
      displayName: 'Deploy SQL Server 2019 update'
      variables:
        variables:
        agentpool: 'kchant DevOps Duet'
        dacpacpath: $(System.ArtifactsDirectory)/$(2019artifactname)
        datadacpacfile: kcdemo2019project.dacpac

      pool: $(agentpool)
        
      steps:
      - task: DownloadBuildArtifacts@0
        displayName: 'Dowload Artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'specific'
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: SqlDacpacDeploymentOnMachineGroup@0
        displayName: 'Install DACPAC'
        inputs:
          TaskType: 'dacpac'
          DacpacFile: '$(dacpacpath)/$(datadacpacfile)'
          TargetMethod: 'server'
          ServerName: 'localhost,1443'
          DatabaseName: '$(database)'
          AuthScheme: 'sqlServerAuthentication'
          SqlUsername: 'sa'
          SqlPassword: $(sqlsapw)
          AdditionalArguments: '/p:IncludeCompositeObjects=true'

- stage: AzureSynBuild
  dependsOn: SQL2008Build
  displayName: 'Build Azure Synapse dacpac'

  jobs:
    - job: 'BuildAzureSynapseDB'
      displayName: 'Build Azure Synapse dacpac'
      variables:
        sourcepath: $(database)-Data
        stagingarea: $(Build.ArtifactStagingDirectory)\synstaging
        destinationpath: $(azuredatabase)
        dacpacpath: $(System.ArtifactsDirectory)/$(artifactname)
        datadacpacfile: $(azuredatabase).dacpac
        datapublishfile: $(dacpacpath)/$(azuredatabase).publish.xml

      pool:
        vmImage: vs2017-win2016
        
      steps:

      - task: CopyFiles@2
        displayName: "Copy files to staging area for Azure Synapse"
        inputs:
          Contents: |
            $(Build.SourcesDirectory)\**
            !azure-pipelines.yml
          TargetFolder: '$(stagingarea)'
          FlattenFolders: false
          OverWrite: true

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            # Write your PowerShell commands here.
            
            ls
            cd..
            cd a
            cd staging\$(database)-Data
            ls

            rename-item kcdemodbproject.sqlproj kcdemoazureproject.sqlproj

            $Old_DSP = 'Microsoft.Data.Tools.Schema.Sql.Sql100DatabaseSchemaProvider'
            $New_DSP = 'Microsoft.Data.Tools.Schema.Sql.SqlDwDatabaseSchemaProvider'
            
            (Get-Content "kcdemoazureproject.sqlproj") -replace $Old_DSP, $New_DSP  | Set-Content "kcdemoazureproject.sqlproj"

      - task: VSBuild@1
        displayName: 'Build Azure Syn project'
        inputs:
          solution: $(stagingarea)/kcdemoazureproject.sqlproj
          configuration: $(configuration)

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Azure Synapse artifact'
        inputs:
          PathtoPublish: '$(stagingarea)\bin\$(configuration)'
          ArtifactName: $(azuresynartifactname)
          publishLocation: 'Container'