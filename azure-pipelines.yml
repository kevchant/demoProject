# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  configuration: release
  sqlinstance: localhost
  database: SQL2019DB
  azuredatabase: AzureDB
  artifactname: SQL2019
  azureartifactname: AzureSQLDB

trigger:
- master
- main
- kcdemobranch

stages:
- stage: AzureBuild
  displayName: 'Build Azure SQL DB dacpac'

  jobs:
    - job: 'BuildAzureSQLDB'
      displayName: 'Build Azure SQL DB dacpac'
      variables:
        sourcepath: $(database)-Data
        stagingarea: $(Build.ArtifactStagingDirectory)\staging
        destinationpath: $(azuredatabase)
        dacpacpath: $(System.ArtifactsDirectory)/$(artifactname)
        datadacpacfile: $(azuredatabase).dacpac
        datapublishfile: $(dacpacpath)/$(azuredatabase).publish.xml

      pool:
        vmImage: vs2017-win2016
        
      steps:
      - task: CopyFiles@2
        displayName: "Copy sqlproj to staging area for Azure-Data"
        inputs:
          Contents: |
            $(azuredatabase)\*.sqlproj
          TargetFolder: '$(stagingarea)'
          FlattenFolders: true
          OverWrite: true

      - task: CopyFiles@2
        displayName: "Copy dbo to staging area for Azure-Data"
        inputs:
          Contents: |
            $(Build.SourcesDirectory)\**
            !$(azuredatabase)\*.sqlproj
            !*.sqlproj
            !azure-pipelines.yml
          TargetFolder: '$(stagingarea)'
          FlattenFolders: false
          OverWrite: true

      - task: VSBuild@1
        displayName: 'Build Azure-Data project'
        inputs:
          solution: $(stagingarea)/kcdemoazureproject.sqlproj
          configuration: $(configuration)

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Azure SQL database artifact'
        inputs:
          PathtoPublish: '$(stagingarea)\bin\$(configuration)'
          ArtifactName: $(azureartifactname)
          publishLocation: 'Container'

